/// Generates a markdown document for the configuration file based on the schema.
struct OptionDocumentBuilder {
  static let preamble = """
    <!-- DO NOT EDIT THIS FILE. This file is generated by \(#fileID). -->

    # Configuration File

    `.sourcekit-lsp/config.json` configuration files can be used to modify the behavior of SourceKit-LSP in various ways. The following locations are checked. Settings in later configuration files override settings in earlier configuration files
    - `~/.sourcekit-lsp/config.json`
    - On macOS: `~/Library/Application Support/org.swift.sourcekit-lsp/config.json` from the various `Library` folders on the system
    - If the `XDG_CONFIG_HOME` environment variable is set: `$XDG_CONFIG_HOME/sourcekit-lsp/config.json`
    - Initialization options passed in the initialize request
    - A `.sourcekit-lsp/config.json` file in a workspaceâ€™s root

    The structure of the file is currently not guaranteed to be stable. Options may be removed or renamed.

    ## Structure

    `config.json` is a JSON file with the following structure. All keys are optional and unknown keys are ignored.

    """

  let context: OptionSchemaContext

  /// Builds a markdown document for the configuration file based on the schema.
  func build(from schema: OptionTypeSchama) throws -> String {
    var doc = Self.preamble

    func appendProperty(_ property: OptionTypeSchama.Property, indentLevel: Int) throws {
      let indent = String(repeating: "  ", count: indentLevel)
      let name = property.name
      doc += "\(indent)- `\(name)"
      let type = property.type
      let typeDescription: String?
      switch type.kind {
      case .object:
        // Skip object type as we describe its properties in the next level
        typeDescription = nil
      default:
        typeDescription = Self.typeToDisplay(type)
      }
      if let typeDescription {
        doc += ": \(typeDescription)`:"
      } else {
        doc += "`:"
      }
      if let description = property.description {
        doc += " " + description.split(separator: "\n").joined(separator: "\n\(indent)  ")
      }
      doc += "\n"
      switch type.kind {
      case .object(let schema):
        for property in schema.properties {
          try appendProperty(property, indentLevel: indentLevel + 1)
        }
      case .enum(let schema):
        for caseInfo in schema.cases {
          // Add detailed description for each case if available
          guard let description = caseInfo.description else {
            continue
          }
          doc += "\(indent)  - `\(caseInfo.name)`"
          doc += ": " + description.split(separator: "\n").joined(separator: "\n\(indent)    ")
          doc += "\n"
        }
      default: break
      }
    }
    guard case .object(let schema) = schema.kind else {
      fatalError("Root schema must be a struct")
    }
    for property in schema.properties {
      try appendProperty(property, indentLevel: 0)
    }
    return doc
  }

  static func typeToDisplay(_ type: OptionTypeSchama, shouldWrap: Bool = false) -> String {
    switch type.kind {
    case .boolean: return "boolean"
    case .integer: return "integer"
    case .number: return "number"
    case .string: return "string"
    case .array(let value):
      return "\(typeToDisplay(value, shouldWrap: true))[]"
    case .dictionary(let value):
      return "[string: \(typeToDisplay(value))]"
    case .object(let objectInfo):
      return objectInfo.name
    case .enum(let enumInfo):
      let cases = enumInfo.cases.map { "\"\($0.name)\"" }.joined(separator: "|")
      return shouldWrap ? "(\(cases))" : cases
    }
  }

}
